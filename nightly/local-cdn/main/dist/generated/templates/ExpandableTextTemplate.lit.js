/* eslint no-unused-vars: 0 */
import { html, svg, repeat, classMap, styleMap, ifDefined, unsafeHTML, scopeTag } from "@ui5/webcomponents-base/dist/renderer/LitRenderer.js";
function block0(context, tags, suffix) { return suffix ? html `<div><${scopeTag("ui5-text", tags, suffix)} class="ui5-exp-text-text" empty-indicator-mode="${ifDefined(this.emptyIndicatorMode)}">${ifDefined(this._displayedText)}</${scopeTag("ui5-text", tags, suffix)}>${this._maxCharactersExceeded ? block1.call(this, context, tags, suffix) : undefined}</div>` : html `<div><ui5-text class="ui5-exp-text-text" empty-indicator-mode="${ifDefined(this.emptyIndicatorMode)}">${ifDefined(this._displayedText)}</ui5-text>${this._maxCharactersExceeded ? block1.call(this, context, tags, suffix) : undefined}</div>`; }
function block1(context, tags, suffix) { return suffix ? html `<span class="ui5-exp-text-ellipsis">${ifDefined(this._ellipsisText)}</span><${scopeTag("ui5-link", tags, suffix)} id="toggle" class="ui5-exp-text-toggle" accessible-role="Button" ?accessible-name="${this._accessibleNameForToggle}" .accessibilityAttributes="${ifDefined(this._accessibilityAttributesForToggle)}" @click="${this._handleToggleClick}" @mousedown="${this._handleToggleMousedown}">${ifDefined(this._textForToggle)}</${scopeTag("ui5-link", tags, suffix)}>${this._usePopover ? block2.call(this, context, tags, suffix) : undefined}` : html `<span class="ui5-exp-text-ellipsis">${ifDefined(this._ellipsisText)}</span><ui5-link id="toggle" class="ui5-exp-text-toggle" accessible-role="Button" ?accessible-name="${this._accessibleNameForToggle}" .accessibilityAttributes="${ifDefined(this._accessibilityAttributesForToggle)}" @click="${this._handleToggleClick}" @mousedown="${this._handleToggleMousedown}">${ifDefined(this._textForToggle)}</ui5-link>${this._usePopover ? block2.call(this, context, tags, suffix) : undefined}`; }
function block2(context, tags, suffix) { return suffix ? html `<${scopeTag("ui5-responsive-popover", tags, suffix)} ?open="${this._expanded}" opener="toggle" accessible-name-ref="popover-text" content-only-on-desktop _hide-header class="ui5-exp-text-popover" @ui5-close="${ifDefined(this._handlePopoverClose)}"><${scopeTag("ui5-text", tags, suffix)} id="popover-text">${ifDefined(this.text)}</${scopeTag("ui5-text", tags, suffix)}><div slot="footer" class="ui5-exp-text-footer"><${scopeTag("ui5-button", tags, suffix)} design="Transparent" @click="${this._handleCloseButtonClick}">${ifDefined(this._closeButtonText)}</${scopeTag("ui5-button", tags, suffix)}></div></${scopeTag("ui5-responsive-popover", tags, suffix)}>` : html `<ui5-responsive-popover ?open="${this._expanded}" opener="toggle" accessible-name-ref="popover-text" content-only-on-desktop _hide-header class="ui5-exp-text-popover" @ui5-close="${ifDefined(this._handlePopoverClose)}"><ui5-text id="popover-text">${ifDefined(this.text)}</ui5-text><div slot="footer" class="ui5-exp-text-footer"><ui5-button design="Transparent" @click="${this._handleCloseButtonClick}">${ifDefined(this._closeButtonText)}</ui5-button></div></ui5-responsive-popover>`; }
export default block0;
//# sourceMappingURL=ExpandableTextTemplate.lit.js.map